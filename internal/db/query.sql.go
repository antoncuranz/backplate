// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
    name, token
) VALUES (
             $1, $2
         )
RETURNING id, name, token, last_sync, sleeps_until
`

type CreateDeviceParams struct {
	Name  string
	Token string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.Name, arg.Token)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.LastSync,
		&i.SleepsUntil,
	)
	return i, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO images (
    device_id, permanent
) VALUES (
    $1, $2
)
RETURNING id, device_id, permanent, data_original, data_processed
`

type CreateImageParams struct {
	DeviceID  int64
	Permanent bool
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage, arg.DeviceID, arg.Permanent)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Permanent,
		&i.DataOriginal,
		&i.DataProcessed,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDevice, id)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, name, token, last_sync, sleeps_until FROM devices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.LastSync,
		&i.SleepsUntil,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, device_id, permanent, data_original, data_processed FROM images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Permanent,
		&i.DataOriginal,
		&i.DataProcessed,
	)
	return i, err
}

const listDevices = `-- name: ListDevices :many
SELECT id, name, token, last_sync, sleeps_until FROM devices
ORDER BY id
`

func (q *Queries) ListDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Token,
			&i.LastSync,
			&i.SleepsUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImages = `-- name: ListImages :many
SELECT id, device_id, permanent, data_original, data_processed FROM images
ORDER BY id
`

func (q *Queries) ListImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Permanent,
			&i.DataOriginal,
			&i.DataProcessed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
